{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red196\green26\blue22;\red28\green0\blue207;
\red170\green13\blue145;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
1) Creation d\'92une interface graphique pour d\'e9finir les contours de la table\
d\'92harmonie. Les contours doivent \'eatre form\'e9 de deux lignes polygonales repr\'e9sentant\
respectivement le contour ext\'e9rieur et le contour de la rosace (ouverture).\
Pour cela on utilisera Python et Tkinter.\
\
Les \'e9l\'e9ments de Tkinter pouvant nous \'eatre utile sont :\
	
\f1\fs22 \CocoaLigature0 PhotoImage(file=\'85) \cf2 # permet de charger une image au format gif\cf0 \
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0
\cf0 		width(), height()\
	\
	Canvas(root, bg=\cf3 "white"\cf0 , width=w, height=h) \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 	# permet notamment d\'92afficher une image et de dessiner\cf0 \
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0
\cf0 		create_image(w/\cf4 2\cf0 ,h/\cf4 2\cf0 ,image=background_image)\
		create_oval(x1, y1, x2, y2, fill=\cf3 "black"\cf0 )\
    	create_line(points, tags=\cf3 "theline"\cf0 , fill=\cf3 "red"\cf0 )\
		\cf2 # points = [\'85, xi, yi, \'85]\cf0 \
		pack() \cf2 # permet l\'92affichage du canna\cf0 \
\

\f0\fs24 \CocoaLigature1 Les widgets Tkinker disposent de la fonction bind(str, fct), qui permet de faire\
appel \'e0 la fonction fct(event) lorsque l\'92\'e9v\'e9nement str a lieux. Par exemple, les\
\'e9v\'e9nement suivant peuvent \'eatre utile :\
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f1\fs22 \cf3 \CocoaLigature0 	"<Button-1>"\
	"<Double-Button-1>"\
	"<Key>"\cf0 \
\
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 Et bien entendu, les fonctions d\'92\'e9criture dans un fichier s\'92av\'e8reront utile :\

\f1\fs22 \CocoaLigature0     file = open(\cf3 \'ab\'a0filename"\cf0 , \cf4 'w'\cf0 )\
    file.write(str)\
    file.close()\
\
2) 
\f0\fs24 \CocoaLigature1 G\'e9n\'e9ration du maillages repr\'e9sentant la table d\'92harmonie.\
Pour cela, il faut tout d\'92abord t\'e9l\'e9charger le code de Triangle :\
	
\b https://www.cs.cmu.edu/~quake/triangle.html 
\b0 \
ainsi que le projet GitHub suivant :\
	
\b TODOTODO
\b0 \
\
Commenc\'e9 par g\'e9n\'e9rer une triangulation de Delaunay dans l\'92envelope convex des points\
en entr\'e9, puis prenez en compte les contours de mani\'e8re correcte, enfin contr\'f4ler la r\'e9solution\
du maillage g\'e9n\'e9r\'e9, et finalement prend en compte la rosace de la table d\'92harmonie (ie pr\'e9sence d\'92un trou dans le maillage).\
\
Quelque information sur l\'92appel \'e0 la fonction triangulate :\

\f1\fs22 \CocoaLigature0     triangulate(\cf3 arg\cf0 , &in, &out, (\cf5 struct\cf0  triangulateio *) \cf5 NULL\cf0 );\

\f0\fs24 \CocoaLigature1 \
arg : chaine de caract\'e8re compos\'e9 de param\'e8tre optionnel\
	c : pr\'e9serve l\'92enveloppe convexe (utile uniquement dans un premier temps)\
	doit ensuite \'eatre remplacer par l\'92utilisation de segment.\
	p : g\'e9n\'e9ration d\'92une triangulation de Delaunay contrainte (sauf si \'91a\'92 ou \'91q\'92 sont utilis\'e9s: conforming constrained Delaunay triangulation).
\b \

\b0 	z : index de tableau commencent \'e0 0\
	e : g\'e9n\'e8re  les \'91edges\'92 du maillage\
	n : g\'e9n\'e8re les voisin des triangles\
	a? : crit\'e8re d\'92aire sur les triangles (r\'e9solution), ? est a remplacer par un nombre flottant\
	q : crit\'e8re sur les angles des triangles\
\
3) Ecrire une fonction calculant un produit matriciel\
\
3) Ecrire le calcul du gradient d\'92une fonction connue : dans un premier temps on supposera que les w_i sont tous \'e9gaux.\
\
4) Calcul les  w_i\
\
}